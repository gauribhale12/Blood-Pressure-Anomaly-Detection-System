/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Model.Encounter;
import Model.EncounterHistory;
import Model.House;
import Model.Patient;
import Model.PatientDirectory;
import Model.Person;
import Model.PersonDirectory;
import Model.VitalSigns;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gauri
 */
public class UpdateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateJPanel
     */
    PersonDirectory directory;
    PatientDirectory patdirectory;
    EncounterHistory enhist;
    public UpdateJPanel(PersonDirectory directory, PatientDirectory patdirectory,EncounterHistory enhist) {
        initComponents();
        this.directory=directory;
        this.patdirectory=patdirectory;
        this.enhist=enhist;
        displayperson();
        displaypatient();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LbTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PersonTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        patienttable = new javax.swing.JTable();
        Lbcity = new javax.swing.JLabel();
        Lbcommunity = new javax.swing.JLabel();
        LbHNo = new javax.swing.JLabel();
        LbName = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        LbAge = new javax.swing.JLabel();
        txtage = new javax.swing.JTextField();
        LbId = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        LbAdd = new javax.swing.JLabel();
        txtadd = new javax.swing.JTextField();
        LbZip = new javax.swing.JLabel();
        txtzip = new javax.swing.JTextField();
        viewbtn = new javax.swing.JButton();
        Updatebtn = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();
        comboboxcity = new javax.swing.JComboBox<>();
        comboboxcommunity = new javax.swing.JComboBox<>();
        comboboxhouseno = new javax.swing.JComboBox<>();
        LbBP = new javax.swing.JLabel();
        txtbp = new javax.swing.JTextField();
        checkbtn = new javax.swing.JButton();
        savebtn = new javax.swing.JButton();
        txtcon = new javax.swing.JTextField();
        lbcon = new javax.swing.JLabel();
        LbNm = new javax.swing.JLabel();
        LbAg = new javax.swing.JLabel();
        LbZP = new javax.swing.JLabel();
        LbCn = new javax.swing.JLabel();
        LbBldPr = new javax.swing.JLabel();
        Lbtbtl = new javax.swing.JLabel();
        Lbtbtl1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        LbTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LbTitle.setForeground(new java.awt.Color(255, 0, 0));
        LbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LbTitle.setText("Person & Patient Details");

        PersonTable.setBackground(new java.awt.Color(255, 255, 204));
        PersonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Person ID", "Name", "Age", "Contact", "HouseNo.", "Address", "Community", "City", "ZipCode"
            }
        ));
        jScrollPane1.setViewportView(PersonTable);

        patienttable.setBackground(new java.awt.Color(255, 255, 204));
        patienttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Person Id", "Name", "Age", "Contact", "HouseNo", "Address", "Community", "City", "ZipCode", "BP Condition", "BP"
            }
        ));
        jScrollPane2.setViewportView(patienttable);

        Lbcity.setBackground(new java.awt.Color(255, 255, 204));
        Lbcity.setText("City:");

        Lbcommunity.setBackground(new java.awt.Color(255, 255, 204));
        Lbcommunity.setText("Community:");

        LbHNo.setBackground(new java.awt.Color(255, 255, 204));
        LbHNo.setText("House No.:");

        LbName.setBackground(new java.awt.Color(255, 255, 204));
        LbName.setText("Name:");

        txtname.setBackground(new java.awt.Color(255, 255, 204));
        txtname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnameActionPerformed(evt);
            }
        });
        txtname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtnameKeyReleased(evt);
            }
        });

        LbAge.setBackground(new java.awt.Color(255, 255, 204));
        LbAge.setText("Age:");

        txtage.setBackground(new java.awt.Color(255, 255, 204));
        txtage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtageKeyReleased(evt);
            }
        });

        LbId.setBackground(new java.awt.Color(255, 255, 204));
        LbId.setText("ID:");

        txtid.setBackground(new java.awt.Color(255, 255, 204));

        LbAdd.setBackground(new java.awt.Color(255, 255, 204));
        LbAdd.setText("Address:");

        txtadd.setBackground(new java.awt.Color(255, 255, 204));

        LbZip.setBackground(new java.awt.Color(255, 255, 204));
        LbZip.setText("ZipCode:");

        txtzip.setBackground(new java.awt.Color(255, 255, 204));
        txtzip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtzipKeyReleased(evt);
            }
        });

        viewbtn.setBackground(new java.awt.Color(255, 255, 204));
        viewbtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        viewbtn.setText("View");
        viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbtnActionPerformed(evt);
            }
        });

        Updatebtn.setBackground(new java.awt.Color(255, 255, 204));
        Updatebtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Updatebtn.setText("Update");
        Updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatebtnActionPerformed(evt);
            }
        });

        Deletebtn.setBackground(new java.awt.Color(255, 255, 204));
        Deletebtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Deletebtn.setText("Delete");
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        comboboxcity.setBackground(new java.awt.Color(255, 255, 204));
        comboboxcity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxcityActionPerformed(evt);
            }
        });

        comboboxcommunity.setBackground(new java.awt.Color(255, 255, 204));
        comboboxcommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxcommunityActionPerformed(evt);
            }
        });

        comboboxhouseno.setBackground(new java.awt.Color(255, 255, 204));

        LbBP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LbBP.setText("Blood Pressure:");

        txtbp.setBackground(new java.awt.Color(255, 255, 204));
        txtbp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbpKeyReleased(evt);
            }
        });

        checkbtn.setBackground(new java.awt.Color(255, 255, 204));
        checkbtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkbtn.setText("Add Vital");
        checkbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbtnActionPerformed(evt);
            }
        });

        savebtn.setBackground(new java.awt.Color(255, 255, 204));
        savebtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        savebtn.setText("Save");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });

        txtcon.setBackground(new java.awt.Color(255, 255, 204));
        txtcon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtconKeyReleased(evt);
            }
        });

        lbcon.setBackground(new java.awt.Color(255, 255, 204));
        lbcon.setText("Conatct:");

        LbNm.setForeground(new java.awt.Color(255, 0, 0));

        LbAg.setForeground(new java.awt.Color(255, 0, 0));

        LbZP.setForeground(new java.awt.Color(255, 0, 0));

        LbCn.setForeground(new java.awt.Color(255, 0, 0));

        LbBldPr.setForeground(new java.awt.Color(255, 0, 0));

        Lbtbtl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Lbtbtl.setText("Person Details Table:");

        Lbtbtl1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Lbtbtl1.setText("Patient Details Table:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(savebtn)
                            .addComponent(Deletebtn))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(viewbtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Updatebtn)
                                        .addGap(239, 239, 239))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LbBP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(LbBldPr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtbp, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(checkbtn)
                                        .addGap(62, 62, 62)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(Lbcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(comboboxcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(LbZip, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbcon))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtzip)
                                                    .addComponent(txtcon)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(LbAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(txtadd))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(LbId, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(txtid))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(LbAge, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(LbAg, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(LbCn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(LbZP, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 8, Short.MAX_VALUE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(LbHNo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(comboboxhouseno, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Lbcity, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(comboboxcity, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(LbName, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LbNm, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lbtbtl, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lbtbtl1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Deletebtn, Updatebtn, viewbtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(Lbtbtl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lbcity)
                            .addComponent(comboboxcity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lbcommunity)
                            .addComponent(comboboxcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LbHNo)
                            .addComponent(comboboxhouseno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LbNm, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LbName)
                                .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LbAg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LbAge)
                                .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Updatebtn)
                                .addComponent(viewbtn))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LbId)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LbAdd)
                    .addComponent(txtadd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LbZip)
                        .addComponent(checkbtn)
                        .addComponent(txtbp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LbBP))
                    .addComponent(txtzip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LbZP, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbcon)
                        .addComponent(LbBldPr, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(LbCn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(Lbtbtl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(savebtn)
                        .addGap(36, 36, 36)
                        .addComponent(Deletebtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(249, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Deletebtn, Updatebtn, viewbtn});

    }// </editor-fold>//GEN-END:initComponents

    private void checkbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = PersonTable.getSelectedRow();
        Person selPerson = directory.getPersonList().get(selectedRowIndex);
        int BP = Integer.parseInt(txtbp.getText());
        VitalSigns Vsgns =new VitalSigns();
        Vsgns.setBP(BP);
        House house =new House();
        Patient Pat =new Patient("",0,0,0,house,Vsgns);
        boolean ISNorm = Pat.ISNorm(selPerson.getPersonage());
        //System.out.println(directory.getPersonList().get(0).getPersonid());
        //System.out.println(selPerson.getPersonid());
        
        if(patdirectory.getPatientList().stream().filter(a -> a.getPersonid() == selPerson.getPersonid()).collect(Collectors.toList()).size()== 0){
            patdirectory.AddPatient(Pat);
            int PatID= getPatID();
            Pat.setPersonid(selPerson.getPersonid());
            Pat.setPersonage(selPerson.getPersonage());
            Pat.setPersonname(selPerson.getPersonname());
            Pat.setContact(selPerson.getContact());
            Pat.setHouse(selPerson.getHouse());
            Pat.setIsnorm(ISNorm);
            //System.out.println(patdirectory.getPatientList().size());
            displaypatient();
        }
        else{
            Pat = patdirectory.getPatientList().stream().filter(a -> a.getPersonid() == selPerson.getPersonid()).collect(Collectors.toList()).get(0);
            Pat.setIsnorm(ISNorm);
            Pat.setVSgns(Vsgns);
            displaypatient();
        }
        Encounter En = new Encounter(Vsgns);
        enhist.AddEncounter(En);
        En.setVSigns(Vsgns);
        En.setEnconterdate(LocalDateTime.now());
        
    }//GEN-LAST:event_checkbtnActionPerformed

    private void comboboxcityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxcityActionPerformed
        // TODO add your handling code here:
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Roxbury");
        model.addElement("Downtown");
        model.addElement("Quincy");
        comboboxcommunity.setModel(model);
    }//GEN-LAST:event_comboboxcityActionPerformed

    private void comboboxcommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxcommunityActionPerformed
        // TODO add your handling code here:
         DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(comboboxcommunity.getSelectedItem().toString() == "Roxbury"){
            model.addElement("1001");
            model.addElement("1002");
            model.addElement("1003");
        }
        else if(comboboxcommunity.getSelectedItem().toString() == "Downtown"){
            model.addElement("1001");
            model.addElement("1002");
            model.addElement("1003");
        }
        else if(comboboxcommunity.getSelectedItem().toString() == "Quincy"){
            model.addElement("1001");
            model.addElement("1002");
            model.addElement("1003");
        }
        comboboxhouseno.setModel(model);
    }//GEN-LAST:event_comboboxcommunityActionPerformed

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        // TODO add your handling code here:
        if(txtname.getText().isEmpty()||txtid.getText().isEmpty()||
          txtadd.getText().isEmpty()||txtage.getText().isEmpty()||
          txtzip.getText().isEmpty()|| comboboxcity.getSelectedItem() ==null || 
          comboboxcommunity.getSelectedItem()==null || comboboxhouseno.getSelectedItem()==null )
           
        {
            JOptionPane.showMessageDialog(null, "All fields are mandatory");
        }
        else{
        int selectedRowIndex = PersonTable.getSelectedRow();
        Person per = directory.getPersonList().get(selectedRowIndex);
        per.setPersonid(Integer.parseInt(txtid.getText()));
        per.setPersonage(Integer.parseInt(txtage.getText()));
        per.setPersonname(txtname.getText());
        per.setContact(Integer.parseInt(txtcon.getText()));
        House hs =new House();
        hs.setAddress(txtadd.getText());
        hs.setHouseNo(Integer.parseInt(comboboxhouseno.getSelectedItem().toString()));
        hs.setCtyname(comboboxcity.getSelectedItem().toString());
        hs.setComname(comboboxcommunity.getSelectedItem().toString());
        hs.setZipcode(Integer.parseInt(txtzip.getText()));
        per.setHouse(hs);
        JOptionPane.showMessageDialog(this,"Updated");
        
        if(patdirectory.getPatientList().size()>0){
           Patient pat = patdirectory.getPatientList().stream().filter(a -> a. getPersonid()== per.getPersonid()).collect(Collectors.toList()).get(0);
           pat.setPersonage(per.getPersonage());
           pat.setPersonname(per.getPersonname());
           pat.setHouse(per.getHouse());
        }
        displayperson();
        displaypatient();
        } 
    }//GEN-LAST:event_savebtnActionPerformed

    private void UpdatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatebtnActionPerformed
        // TODO add your handling code here:
         savebtn.setEnabled(true);
         
        int selectedRowIndex = PersonTable.getSelectedRow();
        
        Person SelPer = directory.getPersonList().get(selectedRowIndex);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Boston");
        comboboxcity.setModel(model);
        comboboxcity.setSelectedItem(SelPer.getHouse().getCtyname());
        
        DefaultComboBoxModel commodel = new DefaultComboBoxModel();
        commodel.addElement("Roxbury");
        commodel.addElement("Downtown");
        commodel.addElement("Quincy");
        comboboxcommunity.setModel(commodel);
        comboboxcommunity.setSelectedItem(SelPer.getHouse().getComname());
        
        DefaultComboBoxModel houmodel = new DefaultComboBoxModel();
        if(comboboxcommunity.getSelectedItem().toString() == "Roxbury")
        {
            houmodel.addElement("1001");
            houmodel.addElement("1002");
            houmodel.addElement("1003");
        }
        else if(comboboxcommunity.getSelectedItem().toString() =="Downtown")
        {
            houmodel.addElement("1001");
            houmodel.addElement("1002");
            houmodel.addElement("1003");
        }
        else if(comboboxcommunity.getSelectedItem().toString() =="Quincy")
        {
            houmodel.addElement("1001");
            houmodel.addElement("1002");
            houmodel.addElement("1003");
        }
        comboboxhouseno.setModel(houmodel);
       comboboxhouseno.setSelectedItem(String.valueOf(SelPer.getHouse().getHouseNo()));
       
       txtadd.setText(SelPer.getHouse().getAddress());
       txtzip.setText(String.valueOf(SelPer.getHouse().getZipcode()));
       txtname.setText(SelPer.getPersonname());
       txtage.setText(String.valueOf(SelPer.getPersonage()));
       txtid.setText(String.valueOf(SelPer.getPersonid()));
       txtcon.setText(String.valueOf(SelPer.getContact()));
        
    }//GEN-LAST:event_UpdatebtnActionPerformed

    private void viewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbtnActionPerformed
        // TODO add your handling code here:
        savebtn.setEnabled(false);
        int selectedRowIndex = PersonTable.getSelectedRow();
        
        Person SelPer = directory.getPersonList().get(selectedRowIndex);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Boston");
        comboboxcity.setModel(model);
        comboboxcity.setSelectedItem(SelPer.getHouse().getCtyname());
        
        DefaultComboBoxModel commodel = new DefaultComboBoxModel();
        commodel.addElement("Roxbury");
        commodel.addElement("Downtown");
        commodel.addElement("Quincy");
        comboboxcommunity.setModel(commodel);
        comboboxcommunity.setSelectedItem(SelPer.getHouse().getComname());
        
        DefaultComboBoxModel houmodel = new DefaultComboBoxModel();
        if(comboboxcommunity.getSelectedItem().toString() == "Roxbury")
        {
        houmodel.addElement("1001");
        houmodel.addElement("1002");
        houmodel.addElement("1003");
        }
        else if(comboboxcommunity.getSelectedItem().toString()== "Downtown")
        {
            houmodel.addElement("2001");
            houmodel.addElement("2002");
            houmodel.addElement("2003");
        }
        else if(comboboxcommunity.getSelectedItem().toString() == "Quincy")
        {
            houmodel.addElement("3001");
            houmodel.addElement("3002");
            houmodel.addElement("3003");
        }
        comboboxhouseno.setModel(houmodel);
        comboboxhouseno.setSelectedItem(String.valueOf(SelPer.getHouse().getHouseNo()));
        
        txtadd.setText(SelPer.getHouse().getAddress());
        txtzip.setText(String.valueOf(SelPer.getHouse().getZipcode()));
        txtname.setText(SelPer.getPersonname());
        txtage.setText(String.valueOf(SelPer.getPersonage()));
        txtid.setText(String.valueOf(SelPer.getPersonid()));
        txtcon.setText(String.valueOf(SelPer.getContact()));
    }//GEN-LAST:event_viewbtnActionPerformed

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        // TODO add your handling code here:
       
        int selectedRowIndex = patienttable.getSelectedRow();
        Person SelPer = directory.getPersonList().get(selectedRowIndex);
        Patient pat = patdirectory.getPatientList().stream().filter(a -> a.getPersonid() == (SelPer.getPersonid())).collect(Collectors.toList()).get(0);
        List<Encounter> newEncounterList = enhist.getEncounterlist().stream().filter(a ->a.getPatientId() == pat.getPatientId()).collect(Collectors.toList());
        for(Encounter En : newEncounterList)
        {
            enhist.removeEnhist(enhist.getEncounterlist().indexOf(En));
        }
        patdirectory.removepat(patdirectory.getPatientList().indexOf(pat));
        directory.removePer(selectedRowIndex);
        //displayperson();
        displaypatient();
    }//GEN-LAST:event_DeletebtnActionPerformed

    private void txtnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnameActionPerformed

    private void txtnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnameKeyReleased
        // TODO add your handling code here:
         String PATTERN;
        PATTERN = "^[A-Za-z][\\sA-za-z]{0,30}$";
        Pattern patt;
        patt = Pattern.compile(PATTERN);
        Matcher match=patt.matcher(txtname.getText());
        if(!match.matches()){
            LbNm.setText("Invalid Naming");
            
        }
        else{ 
       LbNm.setText(null);
        }
    }//GEN-LAST:event_txtnameKeyReleased

    private void txtageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtageKeyReleased
        // TODO add your handling code here:
        String PATTERN;
        PATTERN = "^[0-9]{0,2}$";
        Pattern patt;
        patt = Pattern.compile(PATTERN);
        Matcher match=patt.matcher(txtage.getText());
        if(!match.matches()){
            LbAg.setText("Invalid Age");
            
        }
        else{ 
       LbAg.setText(null);
        }
    }//GEN-LAST:event_txtageKeyReleased

    private void txtzipKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtzipKeyReleased
        // TODO add your handling code here:
        String PATTERN;
        PATTERN = "^[0-9]{0,9}$";
        Pattern patt;
        patt = Pattern.compile(PATTERN);
        Matcher match=patt.matcher(txtzip.getText());
        if(!match.matches()){
            LbZP.setText("Invalid Zipcode");
            
        }
        else{ 
       LbZP.setText(null);
        }
    }//GEN-LAST:event_txtzipKeyReleased

    private void txtconKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtconKeyReleased
        // TODO add your handling code here:
        String PATTERN;
        PATTERN = "^[0-9]{0,10}$";
        Pattern patt;
        patt = Pattern.compile(PATTERN);
        Matcher match=patt.matcher(txtcon.getText());
        if(!match.matches()){
            LbCn.setText("Invalid Contact");
            
        }
        else{ 
       LbCn.setText(null);
        }
    }//GEN-LAST:event_txtconKeyReleased

    private void txtbpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbpKeyReleased
        // TODO add your handling code here:
        String PATTERN;
        PATTERN = "^[0-9]{0,3}$";
        Pattern patt;
        patt = Pattern.compile(PATTERN);
        Matcher match=patt.matcher(txtbp.getText());
        if(!match.matches()){
            LbBldPr.setText("Invalid BP");
            
        }
        else{ 
       LbBldPr.setText(null);
        }
    }//GEN-LAST:event_txtbpKeyReleased

private void displayperson(){
    DefaultTableModel model = (DefaultTableModel) PersonTable.getModel();
    model.setRowCount(0);
    for(Person P : directory.getPersonList()){
        Object[] row = new Object[10];
        row[0] =P.getPersonid();
        row[1] =P.getPersonname();
        row[2] =P.getPersonage();
        row[3] =P.getContact();
        row[7] =P.getHouse().getCtyname();
        row[6] =P.getHouse().getComname();
        row[4] =P.getHouse().getHouseNo();
        row[5] =P.getHouse().getAddress();
        row[8] =P.getHouse().getZipcode();
        model.addRow(row);
        
    }
}
private void displaypatient(){
    DefaultTableModel model= (DefaultTableModel) patienttable.getModel();
    model.setRowCount(0);
    for(Patient P : patdirectory.getPatientList()){
        Object[] row =new Object[11];
        //row[0] = P.getPatientId();
        row[0] =P.getPersonid();
        row[1] =P.getPersonname();
        row[2] =P.getPersonage();
        row[3] =P.getContact();
        row[4] =P.getHouse().getHouseNo();
        row[5] =P.getHouse().getAddress();
        row[6] =P.getHouse().getComname();
        row[7] =P.getHouse().getCtyname();
        row[8] =P.getHouse().getZipcode();
        if(P.isIsnorm() == true){
            row[9] = "Normal";
        }
        else{
            row[9] = "Abnormal";
        }
//        row[10] = P.isIsnorm()? "Norm" : "AbNorm";
        row[10] =P.getVSgns().getBP();
        model.addRow(row);
    }
}
 private int getPatID(){
    int PatID=1;
    if(patdirectory.getPatientList().size() >0){
        ArrayList<Integer> PatIDArr = new ArrayList<Integer>();
        for(int x=0; x<patdirectory.getPatientList().size() ; x++)
        {
            PatIDArr.add(patdirectory.getPatientList().get(x).getPatientId());
        }
        Collections.sort(PatIDArr);
        PatID = PatIDArr.get(PatIDArr.size()-1)+ 1;
        
    }
    return PatID;

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Deletebtn;
    private javax.swing.JLabel LbAdd;
    private javax.swing.JLabel LbAg;
    private javax.swing.JLabel LbAge;
    private javax.swing.JLabel LbBP;
    private javax.swing.JLabel LbBldPr;
    private javax.swing.JLabel LbCn;
    private javax.swing.JLabel LbHNo;
    private javax.swing.JLabel LbId;
    private javax.swing.JLabel LbName;
    private javax.swing.JLabel LbNm;
    private javax.swing.JLabel LbTitle;
    private javax.swing.JLabel LbZP;
    private javax.swing.JLabel LbZip;
    private javax.swing.JLabel Lbcity;
    private javax.swing.JLabel Lbcommunity;
    private javax.swing.JLabel Lbtbtl;
    private javax.swing.JLabel Lbtbtl1;
    private javax.swing.JTable PersonTable;
    private javax.swing.JButton Updatebtn;
    private javax.swing.JButton checkbtn;
    private javax.swing.JComboBox<String> comboboxcity;
    private javax.swing.JComboBox<String> comboboxcommunity;
    private javax.swing.JComboBox<String> comboboxhouseno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbcon;
    private javax.swing.JTable patienttable;
    private javax.swing.JButton savebtn;
    private javax.swing.JTextField txtadd;
    private javax.swing.JTextField txtage;
    private javax.swing.JTextField txtbp;
    private javax.swing.JTextField txtcon;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtzip;
    private javax.swing.JButton viewbtn;
    // End of variables declaration//GEN-END:variables
}
